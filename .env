
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=root
DB_NAME=onedrive
DB_PORT=3005







Application (client) ID
:
765a68e6-2b4c-487a-9624-7c1533374ae1
Object ID
:
c728c448-472a-4691-a105-4b760a6e1575
Directory (tenant) ID
:
2b0a3b04-16bd-4638-be57-5622527eb55e



secrete id ==
add3ea0e-6f76-4223-87ac-cce2419d94d4


------------------------------------new-------------------------------------------------------
 clientId: "15a2e14c-eb1d-4fbc-bfe6-7277c200421e",
        authority: "https://login.microsoftonline.com/2b0a3b04-16bd-4638-be57-5622527eb55e",
        clientSecret: "UG98Q~HpLCCr4a.-IEb24jkJxIs6XavuLeRsccRr",

        ------------------------latest-------------------------



        Display name
:
one-drive url
Application (client) ID : 765a68e6-2b4c-487a-9624-7c1533374ae1

Object ID : c728c448-472a-4691-a105-4b760a6e1575


Directory (tenant) ID: 2b0a3b04-16bd-4638-be57-5622527eb55e

















import axios from 'axios';
import * as msal from '@azure/msal-node';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const config = {
    auth: {
        clientId: "15a2e14c-eb1d-4fbc-bfe6-7277c200421e",
        authority: "https://login.microsoftonline.com/2b0a3b04-16bd-4638-be57-5622527eb55e",
        clientSecret: "UG98Q~HpLCCr4a.-IEb24jkJxIs6XavuLeRsccRr",
    }
};

const cca = new msal.ConfidentialClientApplication(config);

// Function to get access token
export async function getAccessToken() {
    const tokenRequest = {
        scopes: ["https://graph.microsoft.com/.default"],
    };

    try {
        // Attempt to acquire an access token using the client credentials flow
        const response = await cca.acquireTokenByClientCredential(tokenRequest);
        
        // If successful, return the access token from the response
        return response.accessToken;
    } catch (error) {
        // If an error occurs during the token acquisition, log the error details to the console
        console.log("Error fetching access token", error);
        
        // Throw a new error with a general message indicating that authentication has failed
        throw new Error('Authentication failed');
    }
    
}

// Function to download file from OneDrive
export async function downloadFileFromOneDrive(fileUrl) {
    const token = await getAccessToken();

    console.log('i am file url 333333333333', fileUrl)

    console.log('i am token--------------------', token)

    try {

        console.log('inside try block before response+++++++++++++')
        // Make request to OneDrive to fetch file
        const response = await axios.get(fileUrl, {
            headers: {
                'Authorization': `Bearer ${token}`
            },

            responseType: 'stream' // Streaming file for download
        }).then(result=>{
            console.log("Result././......")
            console.log(result);
        }).catch(err=>{
            console.log("Eroro../////")
            console.log(err)
        })

        console.log('after response999999999999999999999999999999999999')

        // Generate file path to save the file locally
        const fileName = path.basename(fileUrl); // Get file name from URL
        const filePath = path.join(__dirname, '../downloads', fileName);

        // Write the file to local file system
        const writer = fs.createWriteStream(filePath);
        response.data.pipe(writer);

        return new Promise((resolve, reject) => {
            writer.on('finish', () => resolve(filePath));
            writer.on('error', reject);
        });
    } catch (error) {
        console.log("Error downloading file:", error);
        throw new Error('Download failed');
    }
}
